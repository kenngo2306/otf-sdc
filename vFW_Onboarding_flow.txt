ONBOARDING VNF (vFW) via ONAP portal:
Main repository for vFW ONAP demo: https://github.com/onap/demo/tree/master/vnfs/vFW
Pre-requisites:
1.	Clone demo heat template from heat directory.
 Heat template:
	https://github.com/onap/demo/blob/master/heat/vFW/base_vfw.yaml
 Heat teamplate format/documentation:
	https://onap.readthedocs.io/en/latest/submodules/vnfrqts/requirements.git/docs/Chapter5/Heat/index.html?highlight=heat
	https://onap.readthedocs.io/en/amsterdam/submodules/dcaegen2.git/docs/sections/installation_heat.html
	https://onap.readthedocs.io/en/amsterdam/submodules/vnfrqts/guidelines.git/docs/all_vnfrqts_seed_docs/open_ecomp/inital_seed_ecomp/VNF_Heat_Templates_for_OpenEcomp/index.html?highlight=heat%20template
	
2.	Consists of 2 VF modules “vFW and vSINK”, “vPKG” which is virtual packet generator which generates a traffic.
	https://github.com/onap/demo/blob/master/vnfs/vFW/scripts/vsink.sh
	https://github.com/onap/demo/blob/master/vnfs/vFW/scripts/v_sink_init.sh
	https://github.com/onap/demo/blob/master/vnfs/vFW/scripts/v_sink_install.sh
	
	https://github.com/onap/demo/blob/master/heat/vFWCL/vPKG/base_vpkg.yaml
	
3.	vFW Directory:
		a. yaml heat template – describes a service
				https://github.com/onap/demo/blob/master/heat/vFW/base_vfw.yaml
		b. env file – parameters used by heat template
				https://github.com/onap/demo/blob/master/heat/vFW/base_vfw.env
		c. manifest file – description of content of directory – used by ONAP to understand how VNF package is composed.
				https://github.com/onap/demo/blob/master/heat/vFW/MANIFEST.json

4.	Zip these 3 files inside the directory on workstation – objective of doing this is onboarding this package file in SDC and distribute metadata to other ONAP components.


Login as a service designer (cs0008)
	ONAP portal project: https://github.com/onap/portal
	
Creating a license module (VLM): 
	NOTE: openecomp-ui written in React, backend written in Java
	front end: https://github.com/onap/sdc/tree/master/openecomp-ui/src/sdc-app/onboarding/licenseModel
	back end: https://github.com/onap/sdc/tree/master/openecomp-be/api/openecomp-sdc-rest-webapp/vendor-license-rest
ONBOARD -> create license in create new VLM –> give vendor name and description of LM.
	
	
For new LM we have to create:
License Agreement, Feature Group, Entitlement pool and license Key groups.
Link feature group with Entitlement pool -> submit -> commit

 Creating a vendor software product (VSP):
	Front end:
		https://github.com/onap/sdc/tree/master/openecomp-ui/src/sdc-app/onboarding/onboard
		https://github.com/onap/sdc/tree/master/openecomp-ui/src/sdc-app/onboarding/softwareProduct
	Back end:
		https://github.com/onap/sdc/tree/master/openecomp-be/api/openecomp-sdc-rest-webapp/vendor-software-products-rest
		
ONBOARD -> create license in create new VSP -> name of new software product -> select vendor VLM -> select category FW(L4+) -> network package (helps to onboard zip pkg which we created before) -> description -> create.
	https://github.com/onap/sdc/blob/master/openecomp-ui/src/sdc-app/onboarding/softwareProduct/creation/SoftwareProductCreationView.jsx
	
Assign the license based on the vendor
version – 1.0 -> license agreement -> feature group

Upload the Zip file in select file
Now you can see .yaml and .env files -> proceed for validation -> warnings -> save it -> submit
	Validation: 
		front end code: https://github.com/onap/sdc/tree/master/openecomp-ui/src/sdc-app/heatvalidation
		back end code:  https://github.com/onap/sdc/tree/master/openecomp-be/api/openecomp-sdc-rest-webapp/validation-rest
		
Import that VSP into catalog
ONBOARD -> Home -> import VSP -> select vendor -> create the asset -> submit it for testing -> logout as designer.
	https://github.com/onap/sdc/blob/master/openecomp-ui/src/sdc-app/onboarding/onboard/onboardingCatalog/VendorItem.jsx

Login as a tester(jm0007)
SDC -> newly deployed VSP is ready for testing -> select vFW-VSINK(VSP) -> start testing
	https://github.com/onap/sdc/blob/master/openecomp-ui/test/softwareProduct/test.js
	https://github.com/onap/sdc/tree/master/openecomp-ui/test/softwareProduct
Everything is fine -> accept the test -> certification confirmed.
	
Now, Testing is done and VSP is ready to be used to cerate service.
Login as a service designer (cs0008)
Connect to SDC -> we can see certified VSP 
To create a service: 
Add service -> General -> assign name = vFW-VSINK service -> description -> assign product code -> category = network L4+ -> create asset.
	NOTE: sdc sub-project code changed to catalog - written in Angular/typescript front end
	https://github.com/onap/sdc/tree/master/catalog-ui/src/app/view-models/workspace/tabs/general
	https://github.com/onap/sdc/tree/master/catalog-ui/src/app/view-models/dashboard
	https://github.com/onap/sdc/blob/master/catalog-ui/src/app/view-models/dashboard/dashboard-view.html
	
To compose the service:
From left corner of portal – all the VSP – select vFW-vSINK & vPKG -> submit the service for testing ->logout
	

Login as a tester(jm0007)
Select the service (vFW-VSINK service) -> start the testing ->Accept the test -> Now service is created but we still need approval.
	https://github.com/onap/sdc/blob/master/test-apis-ci/testngLifeCycle.xml
	https://github.com/onap/sdc/blob/master/catalog-ui/src/app/view-models/workspace/workspace-view.html
	
	
Login as a governor(gv0001)
SDC-> new service i.e. Waiting for approval -> approve -> service approved.
Now we can distribute using operator.
	https://github.com/onap/sdc/blob/master/catalog-ui/src/app/view-models/workspace/workspace-view.html
	https://github.com/onap/sdc/blob/master/catalog-ui/src/app/view-models/workspace/workspace-view-model.ts

Login as a operator(op0001)
Service artifacts are distributed to other ONAP components like A&AI, VID & SO.
New artifacts(service) waiting for approval -> service distribute-> logout
	url: distribution/PROD/activate
	https://github.com/onap/sdc/blob/master/catalog-ui/src/app/view-models/workspace/workspace-view-model.ts

This completes SDC.

 



